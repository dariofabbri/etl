// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.2.1.r95165)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package sap_to_gestionale.import_cliente_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: import_cliente Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.2.1.r95165
 * @status 
 */
public class import_cliente implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "import_cliente";
	private final String projectName = "SAP_TO_GESTIONALE";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					import_cliente.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(import_cliente.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tMSSqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class riga_clienteStruct implements
			routines.system.IPersistableRow<riga_clienteStruct> {
		final static byte[] commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		static byte[] commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[0];

		public String codice;

		public String getCodice() {
			return this.codice;
		}

		public String ragione_sociale;

		public String getRagione_sociale() {
			return this.ragione_sociale;
		}

		public String partita_iva;

		public String getPartita_iva() {
			return this.partita_iva;
		}

		public String codice_fiscale;

		public String getCodice_fiscale() {
			return this.codice_fiscale;
		}

		public Integer gruppo_cliente_id;

		public Integer getGruppo_cliente_id() {
			return this.gruppo_cliente_id;
		}

		public Integer divisa_id;

		public Integer getDivisa_id() {
			return this.divisa_id;
		}

		public String telefono_1;

		public String getTelefono_1() {
			return this.telefono_1;
		}

		public String telefono_2;

		public String getTelefono_2() {
			return this.telefono_2;
		}

		public String cellulare;

		public String getCellulare() {
			return this.cellulare;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public boolean attivo;

		public boolean getAttivo() {
			return this.attivo;
		}

		public java.util.Date attivo_dal_ts;

		public java.util.Date getAttivo_dal_ts() {
			return this.attivo_dal_ts;
		}

		public java.util.Date attivo_al_ts;

		public java.util.Date getAttivo_al_ts() {
			return this.attivo_al_ts;
		}

		public String attivo_note;

		public String getAttivo_note() {
			return this.attivo_note;
		}

		public boolean bloccato;

		public boolean getBloccato() {
			return this.bloccato;
		}

		public java.util.Date bloccato_dal_ts;

		public java.util.Date getBloccato_dal_ts() {
			return this.bloccato_dal_ts;
		}

		public java.util.Date bloccato_al_ts;

		public java.util.Date getBloccato_al_ts() {
			return this.bloccato_al_ts;
		}

		public String bloccato_note;

		public String getBloccato_note() {
			return this.bloccato_note;
		}

		public Integer tipo_business_partner_id;

		public Integer getTipo_business_partner_id() {
			return this.tipo_business_partner_id;
		}

		public BigDecimal saldo_contabile;

		public BigDecimal getSaldo_contabile() {
			return this.saldo_contabile;
		}

		public java.util.Date creazione_ts;

		public java.util.Date getCreazione_ts() {
			return this.creazione_ts;
		}

		public java.util.Date ultima_modifica_ts;

		public java.util.Date getUltima_modifica_ts() {
			return this.ultima_modifica_ts;
		}

		public int azienda_id;

		public int getAzienda_id() {
			return this.azienda_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAP_TO_GESTIONALE_import_cliente.length) {
					if (length < 1024
							&& commonByteArray_SAP_TO_GESTIONALE_import_cliente.length == 0) {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[1024];
					} else {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAP_TO_GESTIONALE_import_cliente,
						0, length);
				strReturn = new String(
						commonByteArray_SAP_TO_GESTIONALE_import_cliente, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente) {

				try {

					int length = 0;

					this.codice = readString(dis);

					this.ragione_sociale = readString(dis);

					this.partita_iva = readString(dis);

					this.codice_fiscale = readString(dis);

					this.gruppo_cliente_id = readInteger(dis);

					this.divisa_id = readInteger(dis);

					this.telefono_1 = readString(dis);

					this.telefono_2 = readString(dis);

					this.cellulare = readString(dis);

					this.fax = readString(dis);

					this.email = readString(dis);

					this.attivo = dis.readBoolean();

					this.attivo_dal_ts = readDate(dis);

					this.attivo_al_ts = readDate(dis);

					this.attivo_note = readString(dis);

					this.bloccato = dis.readBoolean();

					this.bloccato_dal_ts = readDate(dis);

					this.bloccato_al_ts = readDate(dis);

					this.bloccato_note = readString(dis);

					this.tipo_business_partner_id = readInteger(dis);

					this.saldo_contabile = (BigDecimal) dis.readObject();

					this.creazione_ts = readDate(dis);

					this.ultima_modifica_ts = readDate(dis);

					this.azienda_id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codice, dos);

				// String

				writeString(this.ragione_sociale, dos);

				// String

				writeString(this.partita_iva, dos);

				// String

				writeString(this.codice_fiscale, dos);

				// Integer

				writeInteger(this.gruppo_cliente_id, dos);

				// Integer

				writeInteger(this.divisa_id, dos);

				// String

				writeString(this.telefono_1, dos);

				// String

				writeString(this.telefono_2, dos);

				// String

				writeString(this.cellulare, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.email, dos);

				// boolean

				dos.writeBoolean(this.attivo);

				// java.util.Date

				writeDate(this.attivo_dal_ts, dos);

				// java.util.Date

				writeDate(this.attivo_al_ts, dos);

				// String

				writeString(this.attivo_note, dos);

				// boolean

				dos.writeBoolean(this.bloccato);

				// java.util.Date

				writeDate(this.bloccato_dal_ts, dos);

				// java.util.Date

				writeDate(this.bloccato_al_ts, dos);

				// String

				writeString(this.bloccato_note, dos);

				// Integer

				writeInteger(this.tipo_business_partner_id, dos);

				// BigDecimal

				dos.writeObject(this.saldo_contabile);

				// java.util.Date

				writeDate(this.creazione_ts, dos);

				// java.util.Date

				writeDate(this.ultima_modifica_ts, dos);

				// int

				dos.writeInt(this.azienda_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codice=" + codice);
			sb.append(",ragione_sociale=" + ragione_sociale);
			sb.append(",partita_iva=" + partita_iva);
			sb.append(",codice_fiscale=" + codice_fiscale);
			sb.append(",gruppo_cliente_id=" + String.valueOf(gruppo_cliente_id));
			sb.append(",divisa_id=" + String.valueOf(divisa_id));
			sb.append(",telefono_1=" + telefono_1);
			sb.append(",telefono_2=" + telefono_2);
			sb.append(",cellulare=" + cellulare);
			sb.append(",fax=" + fax);
			sb.append(",email=" + email);
			sb.append(",attivo=" + String.valueOf(attivo));
			sb.append(",attivo_dal_ts=" + String.valueOf(attivo_dal_ts));
			sb.append(",attivo_al_ts=" + String.valueOf(attivo_al_ts));
			sb.append(",attivo_note=" + attivo_note);
			sb.append(",bloccato=" + String.valueOf(bloccato));
			sb.append(",bloccato_dal_ts=" + String.valueOf(bloccato_dal_ts));
			sb.append(",bloccato_al_ts=" + String.valueOf(bloccato_al_ts));
			sb.append(",bloccato_note=" + bloccato_note);
			sb.append(",tipo_business_partner_id="
					+ String.valueOf(tipo_business_partner_id));
			sb.append(",saldo_contabile=" + String.valueOf(saldo_contabile));
			sb.append(",creazione_ts=" + String.valueOf(creazione_ts));
			sb.append(",ultima_modifica_ts="
					+ String.valueOf(ultima_modifica_ts));
			sb.append(",azienda_id=" + String.valueOf(azienda_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(riga_clienteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		static byte[] commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[0];

		public String codice;

		public String getCodice() {
			return this.codice;
		}

		public String ragione_sociale;

		public String getRagione_sociale() {
			return this.ragione_sociale;
		}

		public String partita_iva;

		public String getPartita_iva() {
			return this.partita_iva;
		}

		public String codice_fiscale;

		public String getCodice_fiscale() {
			return this.codice_fiscale;
		}

		public String tipo_business_partner_id;

		public String getTipo_business_partner_id() {
			return this.tipo_business_partner_id;
		}

		public Short gruppo_cliente_id;

		public Short getGruppo_cliente_id() {
			return this.gruppo_cliente_id;
		}

		public String divisa_id;

		public String getDivisa_id() {
			return this.divisa_id;
		}

		public String telefono_1;

		public String getTelefono_1() {
			return this.telefono_1;
		}

		public String telefono_2;

		public String getTelefono_2() {
			return this.telefono_2;
		}

		public String cellulare;

		public String getCellulare() {
			return this.cellulare;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String attivo;

		public String getAttivo() {
			return this.attivo;
		}

		public java.util.Date attivo_dal_ts;

		public java.util.Date getAttivo_dal_ts() {
			return this.attivo_dal_ts;
		}

		public java.util.Date attivo_al_ts;

		public java.util.Date getAttivo_al_ts() {
			return this.attivo_al_ts;
		}

		public String attivo_note;

		public String getAttivo_note() {
			return this.attivo_note;
		}

		public String bloccato;

		public String getBloccato() {
			return this.bloccato;
		}

		public java.util.Date bloccato_dal_ts;

		public java.util.Date getBloccato_dal_ts() {
			return this.bloccato_dal_ts;
		}

		public java.util.Date bloccato_al_ts;

		public java.util.Date getBloccato_al_ts() {
			return this.bloccato_al_ts;
		}

		public String bloccato_note;

		public String getBloccato_note() {
			return this.bloccato_note;
		}

		public BigDecimal saldo_contabile;

		public BigDecimal getSaldo_contabile() {
			return this.saldo_contabile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAP_TO_GESTIONALE_import_cliente.length) {
					if (length < 1024
							&& commonByteArray_SAP_TO_GESTIONALE_import_cliente.length == 0) {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[1024];
					} else {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAP_TO_GESTIONALE_import_cliente,
						0, length);
				strReturn = new String(
						commonByteArray_SAP_TO_GESTIONALE_import_cliente, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente) {

				try {

					int length = 0;

					this.codice = readString(dis);

					this.ragione_sociale = readString(dis);

					this.partita_iva = readString(dis);

					this.codice_fiscale = readString(dis);

					this.tipo_business_partner_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.gruppo_cliente_id = null;
					} else {
						this.gruppo_cliente_id = dis.readShort();
					}

					this.divisa_id = readString(dis);

					this.telefono_1 = readString(dis);

					this.telefono_2 = readString(dis);

					this.cellulare = readString(dis);

					this.fax = readString(dis);

					this.email = readString(dis);

					this.attivo = readString(dis);

					this.attivo_dal_ts = readDate(dis);

					this.attivo_al_ts = readDate(dis);

					this.attivo_note = readString(dis);

					this.bloccato = readString(dis);

					this.bloccato_dal_ts = readDate(dis);

					this.bloccato_al_ts = readDate(dis);

					this.bloccato_note = readString(dis);

					this.saldo_contabile = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codice, dos);

				// String

				writeString(this.ragione_sociale, dos);

				// String

				writeString(this.partita_iva, dos);

				// String

				writeString(this.codice_fiscale, dos);

				// String

				writeString(this.tipo_business_partner_id, dos);

				// Short

				if (this.gruppo_cliente_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.gruppo_cliente_id);
				}

				// String

				writeString(this.divisa_id, dos);

				// String

				writeString(this.telefono_1, dos);

				// String

				writeString(this.telefono_2, dos);

				// String

				writeString(this.cellulare, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.attivo, dos);

				// java.util.Date

				writeDate(this.attivo_dal_ts, dos);

				// java.util.Date

				writeDate(this.attivo_al_ts, dos);

				// String

				writeString(this.attivo_note, dos);

				// String

				writeString(this.bloccato, dos);

				// java.util.Date

				writeDate(this.bloccato_dal_ts, dos);

				// java.util.Date

				writeDate(this.bloccato_al_ts, dos);

				// String

				writeString(this.bloccato_note, dos);

				// BigDecimal

				dos.writeObject(this.saldo_contabile);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codice=" + codice);
			sb.append(",ragione_sociale=" + ragione_sociale);
			sb.append(",partita_iva=" + partita_iva);
			sb.append(",codice_fiscale=" + codice_fiscale);
			sb.append(",tipo_business_partner_id=" + tipo_business_partner_id);
			sb.append(",gruppo_cliente_id=" + String.valueOf(gruppo_cliente_id));
			sb.append(",divisa_id=" + divisa_id);
			sb.append(",telefono_1=" + telefono_1);
			sb.append(",telefono_2=" + telefono_2);
			sb.append(",cellulare=" + cellulare);
			sb.append(",fax=" + fax);
			sb.append(",email=" + email);
			sb.append(",attivo=" + attivo);
			sb.append(",attivo_dal_ts=" + String.valueOf(attivo_dal_ts));
			sb.append(",attivo_al_ts=" + String.valueOf(attivo_al_ts));
			sb.append(",attivo_note=" + attivo_note);
			sb.append(",bloccato=" + bloccato);
			sb.append(",bloccato_dal_ts=" + String.valueOf(bloccato_dal_ts));
			sb.append(",bloccato_al_ts=" + String.valueOf(bloccato_al_ts));
			sb.append(",bloccato_note=" + bloccato_note);
			sb.append(",saldo_contabile=" + String.valueOf(saldo_contabile));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMSSqlInput_1Struct implements
			routines.system.IPersistableRow<after_tMSSqlInput_1Struct> {
		final static byte[] commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		static byte[] commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[0];

		public String codice;

		public String getCodice() {
			return this.codice;
		}

		public String ragione_sociale;

		public String getRagione_sociale() {
			return this.ragione_sociale;
		}

		public String partita_iva;

		public String getPartita_iva() {
			return this.partita_iva;
		}

		public String codice_fiscale;

		public String getCodice_fiscale() {
			return this.codice_fiscale;
		}

		public String tipo_business_partner_id;

		public String getTipo_business_partner_id() {
			return this.tipo_business_partner_id;
		}

		public Short gruppo_cliente_id;

		public Short getGruppo_cliente_id() {
			return this.gruppo_cliente_id;
		}

		public String divisa_id;

		public String getDivisa_id() {
			return this.divisa_id;
		}

		public String telefono_1;

		public String getTelefono_1() {
			return this.telefono_1;
		}

		public String telefono_2;

		public String getTelefono_2() {
			return this.telefono_2;
		}

		public String cellulare;

		public String getCellulare() {
			return this.cellulare;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String attivo;

		public String getAttivo() {
			return this.attivo;
		}

		public java.util.Date attivo_dal_ts;

		public java.util.Date getAttivo_dal_ts() {
			return this.attivo_dal_ts;
		}

		public java.util.Date attivo_al_ts;

		public java.util.Date getAttivo_al_ts() {
			return this.attivo_al_ts;
		}

		public String attivo_note;

		public String getAttivo_note() {
			return this.attivo_note;
		}

		public String bloccato;

		public String getBloccato() {
			return this.bloccato;
		}

		public java.util.Date bloccato_dal_ts;

		public java.util.Date getBloccato_dal_ts() {
			return this.bloccato_dal_ts;
		}

		public java.util.Date bloccato_al_ts;

		public java.util.Date getBloccato_al_ts() {
			return this.bloccato_al_ts;
		}

		public String bloccato_note;

		public String getBloccato_note() {
			return this.bloccato_note;
		}

		public BigDecimal saldo_contabile;

		public BigDecimal getSaldo_contabile() {
			return this.saldo_contabile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAP_TO_GESTIONALE_import_cliente.length) {
					if (length < 1024
							&& commonByteArray_SAP_TO_GESTIONALE_import_cliente.length == 0) {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[1024];
					} else {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAP_TO_GESTIONALE_import_cliente,
						0, length);
				strReturn = new String(
						commonByteArray_SAP_TO_GESTIONALE_import_cliente, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente) {

				try {

					int length = 0;

					this.codice = readString(dis);

					this.ragione_sociale = readString(dis);

					this.partita_iva = readString(dis);

					this.codice_fiscale = readString(dis);

					this.tipo_business_partner_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.gruppo_cliente_id = null;
					} else {
						this.gruppo_cliente_id = dis.readShort();
					}

					this.divisa_id = readString(dis);

					this.telefono_1 = readString(dis);

					this.telefono_2 = readString(dis);

					this.cellulare = readString(dis);

					this.fax = readString(dis);

					this.email = readString(dis);

					this.attivo = readString(dis);

					this.attivo_dal_ts = readDate(dis);

					this.attivo_al_ts = readDate(dis);

					this.attivo_note = readString(dis);

					this.bloccato = readString(dis);

					this.bloccato_dal_ts = readDate(dis);

					this.bloccato_al_ts = readDate(dis);

					this.bloccato_note = readString(dis);

					this.saldo_contabile = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codice, dos);

				// String

				writeString(this.ragione_sociale, dos);

				// String

				writeString(this.partita_iva, dos);

				// String

				writeString(this.codice_fiscale, dos);

				// String

				writeString(this.tipo_business_partner_id, dos);

				// Short

				if (this.gruppo_cliente_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.gruppo_cliente_id);
				}

				// String

				writeString(this.divisa_id, dos);

				// String

				writeString(this.telefono_1, dos);

				// String

				writeString(this.telefono_2, dos);

				// String

				writeString(this.cellulare, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.attivo, dos);

				// java.util.Date

				writeDate(this.attivo_dal_ts, dos);

				// java.util.Date

				writeDate(this.attivo_al_ts, dos);

				// String

				writeString(this.attivo_note, dos);

				// String

				writeString(this.bloccato, dos);

				// java.util.Date

				writeDate(this.bloccato_dal_ts, dos);

				// java.util.Date

				writeDate(this.bloccato_al_ts, dos);

				// String

				writeString(this.bloccato_note, dos);

				// BigDecimal

				dos.writeObject(this.saldo_contabile);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codice=" + codice);
			sb.append(",ragione_sociale=" + ragione_sociale);
			sb.append(",partita_iva=" + partita_iva);
			sb.append(",codice_fiscale=" + codice_fiscale);
			sb.append(",tipo_business_partner_id=" + tipo_business_partner_id);
			sb.append(",gruppo_cliente_id=" + String.valueOf(gruppo_cliente_id));
			sb.append(",divisa_id=" + divisa_id);
			sb.append(",telefono_1=" + telefono_1);
			sb.append(",telefono_2=" + telefono_2);
			sb.append(",cellulare=" + cellulare);
			sb.append(",fax=" + fax);
			sb.append(",email=" + email);
			sb.append(",attivo=" + attivo);
			sb.append(",attivo_dal_ts=" + String.valueOf(attivo_dal_ts));
			sb.append(",attivo_al_ts=" + String.valueOf(attivo_al_ts));
			sb.append(",attivo_note=" + attivo_note);
			sb.append(",bloccato=" + bloccato);
			sb.append(",bloccato_dal_ts=" + String.valueOf(bloccato_dal_ts));
			sb.append(",bloccato_al_ts=" + String.valueOf(bloccato_al_ts));
			sb.append(",bloccato_note=" + bloccato_note);
			sb.append(",saldo_contabile=" + String.valueOf(saldo_contabile));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMSSqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				riga_clienteStruct riga_cliente = new riga_clienteStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_riga_cliente = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_riga_cliente.putIfAbsent("riga_cliente"
							+ iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_riga_cliente = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_riga_cliente
							.get("riga_cliente" + iterateLoop);
					runStat.updateStatOnConnection("riga_cliente" + iterateId,
							stats_riga_cliente.incrementAndGet() <= 1 ? 0 : 1,
							0);
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "com_cliente";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "com_cliente";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "ivncr";
				String dbUser_tPostgresqlOutput_1 = "ivncr";
				String dbPwd_tPostgresqlOutput_1 = "ivncr";
				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.Statement stmtClear_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement();
				stmtClear_tPostgresqlOutput_1.executeUpdate("DELETE FROM \""
						+ tableName_tPostgresqlOutput_1 + "\"");
				stmtClear_tPostgresqlOutput_1.close();
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"codice\",\"ragione_sociale\",\"partita_iva\",\"codice_fiscale\",\"gruppo_cliente_id\",\"divisa_id\",\"telefono_1\",\"telefono_2\",\"cellulare\",\"fax\",\"email\",\"attivo\",\"attivo_dal_ts\",\"attivo_al_ts\",\"attivo_note\",\"bloccato\",\"bloccato_dal_ts\",\"bloccato_al_ts\",\"bloccato_note\",\"tipo_business_partner_id\",\"saldo_contabile\",\"creazione_ts\",\"ultima_modifica_ts\",\"azienda_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row1 = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_row1.putIfAbsent("row1" + iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_row1 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row1
							.get("row1" + iterateLoop);
					runStat.updateStatOnConnection("row1" + iterateId,
							stats_row1.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				riga_clienteStruct riga_cliente_tmp = new riga_clienteStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMSSqlInput_1 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_1", false);
				start_Hash.put("tMSSqlInput_1", System.currentTimeMillis());
				currentComponent = "tMSSqlInput_1";

				int tos_count_tMSSqlInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_1 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_1,
						talendToDBArray_tMSSqlInput_1);
				int nb_line_tMSSqlInput_1 = 0;
				java.sql.Connection conn_tMSSqlInput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMSSqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMSSqlInput_1) {
					conn_tMSSqlInput_1 = dataSources_tMSSqlInput_1.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("net.sourceforge.jtds.jdbc.Driver");

					String port_tMSSqlInput_1 = "1433";
					String dbname_tMSSqlInput_1 = "securintel";
					String url_tMSSqlInput_1 = "jdbc:jtds:sqlserver://"
							+ "192.168.2.207";
					if (!"".equals(port_tMSSqlInput_1)) {
						url_tMSSqlInput_1 += ":" + "1433";
					}
					if (!"".equals(dbname_tMSSqlInput_1)) {
						url_tMSSqlInput_1 += "//" + "securintel";
					}
					url_tMSSqlInput_1 += ";appName=" + projectName + ";" + "";
					String dbschema_tMSSqlInput_1 = "dbo";
					String dbUser_tMSSqlInput_1 = "ced";
					String dbPwd_tMSSqlInput_1 = "Ap4ac0v1";
					conn_tMSSqlInput_1 = java.sql.DriverManager.getConnection(
							url_tMSSqlInput_1, dbUser_tMSSqlInput_1,
							dbPwd_tMSSqlInput_1);
				}

				java.sql.Statement stmt_tMSSqlInput_1 = conn_tMSSqlInput_1
						.createStatement();

				String dbquery_tMSSqlInput_1 = "SELECT dbo.OCRD.CardCode as codice,  		dbo.OCRD.CardName as ragione_sociale,  		dbo.OCRD.LicTradNum as partita_iva,  		dbo.OCRD.AddID as codice_fiscale,  		dbo.OCRD.CmpPrivate as tipo_business_partner_id,  		dbo.OCRD.GroupCode as gruppo_cliente_id,  		dbo.OCRD.Currency as divisa_id,  		dbo.OCRD.Phone1 as telefono_1,  		dbo.OCRD.Phone2 as telefono_2,  		dbo.OCRD.Cellular as cellulare,  		dbo.OCRD.Fax as fax,  		dbo.OCRD.E_Mail as email,  		dbo.OCRD.validFor as attivo,  		dbo.OCRD.validFrom as attivo_dal_ts,  		dbo.OCRD.validTo as attivo_al_ts,  		dbo.OCRD.FrozenComm as attivo_note,  		dbo.OCRD.frozenFor as bloccato,  		dbo.OCRD.frozenFrom as bloccato_dal_ts,  		dbo.OCRD.frozenTo as bloccato_al_ts,  		dbo.OCRD.ValidComm as bloccato_note,  		dbo.OCRD.Balance as saldo_contabile  FROM	dbo.OCRD  WHERE OCRD.CardType = 'C'";

				globalMap.put("tMSSqlInput_1_QUERY", dbquery_tMSSqlInput_1);

				java.sql.ResultSet rs_tMSSqlInput_1 = stmt_tMSSqlInput_1
						.executeQuery(dbquery_tMSSqlInput_1);
				java.sql.ResultSetMetaData rsmd_tMSSqlInput_1 = rs_tMSSqlInput_1
						.getMetaData();
				int colQtyInRs_tMSSqlInput_1 = rsmd_tMSSqlInput_1
						.getColumnCount();

				String tmpContent_tMSSqlInput_1 = null;
				while (rs_tMSSqlInput_1.next()) {
					nb_line_tMSSqlInput_1++;

					if (colQtyInRs_tMSSqlInput_1 < 1) {
						row1.codice = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(1);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(1).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.codice = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.codice = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.codice = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 2) {
						row1.ragione_sociale = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(2);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(2).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.ragione_sociale = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.ragione_sociale = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.ragione_sociale = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 3) {
						row1.partita_iva = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(3);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(3).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.partita_iva = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.partita_iva = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.partita_iva = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 4) {
						row1.codice_fiscale = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(4);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(4).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.codice_fiscale = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.codice_fiscale = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.codice_fiscale = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 5) {
						row1.tipo_business_partner_id = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(5);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(5).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.tipo_business_partner_id = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.tipo_business_partner_id = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.tipo_business_partner_id = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 6) {
						row1.gruppo_cliente_id = null;
					} else {

						if (rs_tMSSqlInput_1.getObject(6) != null) {
							row1.gruppo_cliente_id = rs_tMSSqlInput_1
									.getShort(6);
						} else {
							row1.gruppo_cliente_id = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 7) {
						row1.divisa_id = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(7);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(7).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.divisa_id = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.divisa_id = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.divisa_id = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 8) {
						row1.telefono_1 = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(8);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(8).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.telefono_1 = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.telefono_1 = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.telefono_1 = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 9) {
						row1.telefono_2 = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(9);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(9).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.telefono_2 = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.telefono_2 = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.telefono_2 = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 10) {
						row1.cellulare = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(10);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(10).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.cellulare = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.cellulare = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.cellulare = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 11) {
						row1.fax = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(11);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(11).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.fax = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.fax = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.fax = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 12) {
						row1.email = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(12);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(12).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.email = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.email = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.email = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 13) {
						row1.attivo = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(13);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(13).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.attivo = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.attivo = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.attivo = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 14) {
						row1.attivo_dal_ts = null;
					} else {

						row1.attivo_dal_ts = mssqlGTU_tMSSqlInput_1.getDate(
								rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 14);

					}
					if (colQtyInRs_tMSSqlInput_1 < 15) {
						row1.attivo_al_ts = null;
					} else {

						row1.attivo_al_ts = mssqlGTU_tMSSqlInput_1.getDate(
								rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 15);

					}
					if (colQtyInRs_tMSSqlInput_1 < 16) {
						row1.attivo_note = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(16);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(16).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.attivo_note = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.attivo_note = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.attivo_note = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 17) {
						row1.bloccato = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(17);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(17).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.bloccato = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.bloccato = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.bloccato = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 18) {
						row1.bloccato_dal_ts = null;
					} else {

						row1.bloccato_dal_ts = mssqlGTU_tMSSqlInput_1.getDate(
								rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 18);

					}
					if (colQtyInRs_tMSSqlInput_1 < 19) {
						row1.bloccato_al_ts = null;
					} else {

						row1.bloccato_al_ts = mssqlGTU_tMSSqlInput_1.getDate(
								rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 19);

					}
					if (colQtyInRs_tMSSqlInput_1 < 20) {
						row1.bloccato_note = null;
					} else {

						tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
								.getString(20);
						if (tmpContent_tMSSqlInput_1 != null) {
							if (talendToDBList_tMSSqlInput_1
									.contains(rsmd_tMSSqlInput_1
											.getColumnTypeName(20).toUpperCase(
													java.util.Locale.ENGLISH))) {
								row1.bloccato_note = FormatterUtils
										.formatUnwithE(tmpContent_tMSSqlInput_1);
							} else {
								row1.bloccato_note = tmpContent_tMSSqlInput_1;
							}
						} else {
							row1.bloccato_note = null;
						}

					}
					if (colQtyInRs_tMSSqlInput_1 < 21) {
						row1.saldo_contabile = null;
					} else {

						if (rs_tMSSqlInput_1.getObject(21) != null) {
							row1.saldo_contabile = rs_tMSSqlInput_1
									.getBigDecimal(21);
						} else {
							row1.saldo_contabile = null;
						}

					}

					/**
					 * [tMSSqlInput_1 begin ] stop
					 */
					/**
					 * [tMSSqlInput_1 main ] start
					 */

					currentComponent = "tMSSqlInput_1";

					tos_count_tMSSqlInput_1++;

					/**
					 * [tMSSqlInput_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row2"
					// /////////////////////////////////////////////

					boolean forceLooprow2 = false;

					row2Struct row2ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						Object exprKeyValue_row2__azienda_id = 1;
						if (exprKeyValue_row2__azienda_id == null) {
							hasCasePrimitiveKeyWithNull_tMap_1 = true;
						} else {
							row2HashKey.azienda_id = (int) (Integer) exprKeyValue_row2__azienda_id;
						}

						row2HashKey.codice_sap = row1.divisa_id;

						row2HashKey.hashCodeDirty = true;

						if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_091

					} // G_TM_M_020

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.azienda_id = '"
						// + row2HashKey.azienda_id + "', row2.codice_sap = '" +
						// row2HashKey.codice_sap + "'");
					} // G 071

					row2Struct row2 = null;

					row2Struct fromLookup_row2 = null;
					row2 = row2Default;

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.hasNext()) { // G 099

						fromLookup_row2 = tHash_Lookup_row2.next();

					} // G 099

					if (fromLookup_row2 != null) {
						row2 = fromLookup_row2;
					}

					// /////////////////////////////////////////////
					// Starting Lookup Table "row3"
					// /////////////////////////////////////////////

					boolean forceLooprow3 = false;

					row3Struct row3ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						Object exprKeyValue_row3__azienda_id = 1;
						if (exprKeyValue_row3__azienda_id == null) {
							hasCasePrimitiveKeyWithNull_tMap_1 = true;
						} else {
							row3HashKey.azienda_id = (int) (Integer) exprKeyValue_row3__azienda_id;
						}

						Object exprKeyValue_row3__codice_sap = row1.gruppo_cliente_id;
						if (exprKeyValue_row3__codice_sap == null) {
							hasCasePrimitiveKeyWithNull_tMap_1 = true;
						} else {
							row3HashKey.codice_sap = (short) (Short) exprKeyValue_row3__codice_sap;
						}

						row3HashKey.hashCodeDirty = true;

						if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_091

					} // G_TM_M_020

					if (tHash_Lookup_row3 != null
							&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.azienda_id = '"
						// + row3HashKey.azienda_id + "', row3.codice_sap = '" +
						// row3HashKey.codice_sap + "'");
					} // G 071

					row3Struct row3 = null;

					row3Struct fromLookup_row3 = null;
					row3 = row3Default;

					if (tHash_Lookup_row3 != null
							&& tHash_Lookup_row3.hasNext()) { // G 099

						fromLookup_row3 = tHash_Lookup_row3.next();

					} // G 099

					if (fromLookup_row3 != null) {
						row3 = fromLookup_row3;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						riga_cliente = null;

						// # Output table : 'riga_cliente'
						riga_cliente_tmp.codice = row1.codice;
						riga_cliente_tmp.ragione_sociale = row1.ragione_sociale;
						riga_cliente_tmp.partita_iva = row1.partita_iva;
						riga_cliente_tmp.codice_fiscale = row1.codice_fiscale;
						riga_cliente_tmp.gruppo_cliente_id = row3.codice_gestionale;
						riga_cliente_tmp.divisa_id = row2.codice_gestionale;
						riga_cliente_tmp.telefono_1 = row1.telefono_1;
						riga_cliente_tmp.telefono_2 = row1.telefono_2;
						riga_cliente_tmp.cellulare = row1.cellulare;
						riga_cliente_tmp.fax = row1.fax;
						riga_cliente_tmp.email = row1.email;
						riga_cliente_tmp.attivo = (row1.attivo.equals("N") && row1.bloccato
								.equals("N")) ? true : row1.attivo.equals("Y");
						riga_cliente_tmp.attivo_dal_ts = row1.attivo_dal_ts;
						riga_cliente_tmp.attivo_al_ts = row1.attivo_al_ts;
						riga_cliente_tmp.attivo_note = row1.attivo_note;
						riga_cliente_tmp.bloccato = row1.bloccato
								.equalsIgnoreCase("Y");
						riga_cliente_tmp.bloccato_dal_ts = row1.bloccato_dal_ts;
						riga_cliente_tmp.bloccato_al_ts = row1.bloccato_al_ts;
						riga_cliente_tmp.bloccato_note = row1.bloccato_note;
						riga_cliente_tmp.tipo_business_partner_id = row1.tipo_business_partner_id
								.equalsIgnoreCase("C") ? 1
								: row1.tipo_business_partner_id
										.equalsIgnoreCase("I") ? (row1.codice_fiscale
										.substring(0, 1).equals("8")
										|| row1.codice_fiscale.substring(0, 1)
												.equals("9") ? 3 : 2) : 999;
						riga_cliente_tmp.saldo_contabile = row1.saldo_contabile;
						riga_cliente_tmp.creazione_ts = TalendDate
								.getCurrentDate();
						riga_cliente_tmp.ultima_modifica_ts = TalendDate
								.getCurrentDate();
						riga_cliente_tmp.azienda_id = 1;
						riga_cliente = riga_cliente_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "riga_cliente"
					if (riga_cliente != null) {

						/**
						 * [tPostgresqlOutput_1 main ] start
						 */

						currentComponent = "tPostgresqlOutput_1";

						// riga_cliente
						// riga_cliente

						if (execStat) {
							runStat.updateStatOnConnection("riga_cliente"
									+ iterateId, 1, 1);
						}

						whetherReject_tPostgresqlOutput_1 = false;
						if (riga_cliente.codice == null) {
							pstmt_tPostgresqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(1,
									riga_cliente.codice);
						}

						if (riga_cliente.ragione_sociale == null) {
							pstmt_tPostgresqlOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(2,
									riga_cliente.ragione_sociale);
						}

						if (riga_cliente.partita_iva == null) {
							pstmt_tPostgresqlOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(3,
									riga_cliente.partita_iva);
						}

						if (riga_cliente.codice_fiscale == null) {
							pstmt_tPostgresqlOutput_1.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(4,
									riga_cliente.codice_fiscale);
						}

						if (riga_cliente.gruppo_cliente_id == null) {
							pstmt_tPostgresqlOutput_1.setNull(5,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tPostgresqlOutput_1.setInt(5,
									riga_cliente.gruppo_cliente_id);
						}

						if (riga_cliente.divisa_id == null) {
							pstmt_tPostgresqlOutput_1.setNull(6,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tPostgresqlOutput_1.setInt(6,
									riga_cliente.divisa_id);
						}

						if (riga_cliente.telefono_1 == null) {
							pstmt_tPostgresqlOutput_1.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(7,
									riga_cliente.telefono_1);
						}

						if (riga_cliente.telefono_2 == null) {
							pstmt_tPostgresqlOutput_1.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(8,
									riga_cliente.telefono_2);
						}

						if (riga_cliente.cellulare == null) {
							pstmt_tPostgresqlOutput_1.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(9,
									riga_cliente.cellulare);
						}

						if (riga_cliente.fax == null) {
							pstmt_tPostgresqlOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(10,
									riga_cliente.fax);
						}

						if (riga_cliente.email == null) {
							pstmt_tPostgresqlOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(11,
									riga_cliente.email);
						}

						pstmt_tPostgresqlOutput_1.setBoolean(12,
								riga_cliente.attivo);

						if (riga_cliente.attivo_dal_ts != null) {
							pstmt_tPostgresqlOutput_1.setTimestamp(
									13,
									new java.sql.Timestamp(
											riga_cliente.attivo_dal_ts
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_1.setNull(13,
									java.sql.Types.TIMESTAMP);
						}

						if (riga_cliente.attivo_al_ts != null) {
							pstmt_tPostgresqlOutput_1
									.setTimestamp(
											14,
											new java.sql.Timestamp(
													riga_cliente.attivo_al_ts
															.getTime()));
						} else {
							pstmt_tPostgresqlOutput_1.setNull(14,
									java.sql.Types.TIMESTAMP);
						}

						if (riga_cliente.attivo_note == null) {
							pstmt_tPostgresqlOutput_1.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(15,
									riga_cliente.attivo_note);
						}

						pstmt_tPostgresqlOutput_1.setBoolean(16,
								riga_cliente.bloccato);

						if (riga_cliente.bloccato_dal_ts != null) {
							pstmt_tPostgresqlOutput_1.setTimestamp(
									17,
									new java.sql.Timestamp(
											riga_cliente.bloccato_dal_ts
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_1.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (riga_cliente.bloccato_al_ts != null) {
							pstmt_tPostgresqlOutput_1.setTimestamp(
									18,
									new java.sql.Timestamp(
											riga_cliente.bloccato_al_ts
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_1.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (riga_cliente.bloccato_note == null) {
							pstmt_tPostgresqlOutput_1.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_1.setString(19,
									riga_cliente.bloccato_note);
						}

						if (riga_cliente.tipo_business_partner_id == null) {
							pstmt_tPostgresqlOutput_1.setNull(20,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tPostgresqlOutput_1.setInt(20,
									riga_cliente.tipo_business_partner_id);
						}

						pstmt_tPostgresqlOutput_1.setBigDecimal(21,
								riga_cliente.saldo_contabile);

						if (riga_cliente.creazione_ts != null) {
							pstmt_tPostgresqlOutput_1
									.setTimestamp(
											22,
											new java.sql.Timestamp(
													riga_cliente.creazione_ts
															.getTime()));
						} else {
							pstmt_tPostgresqlOutput_1.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (riga_cliente.ultima_modifica_ts != null) {
							pstmt_tPostgresqlOutput_1.setTimestamp(
									23,
									new java.sql.Timestamp(
											riga_cliente.ultima_modifica_ts
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_1.setNull(23,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tPostgresqlOutput_1.setInt(24,
								riga_cliente.azienda_id);

						try {

							insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
									+ pstmt_tPostgresqlOutput_1.executeUpdate();

							nb_line_tPostgresqlOutput_1++;
						} catch (Exception e) {

							whetherReject_tPostgresqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
						commitCounter_tPostgresqlOutput_1++;
						if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {

							conn_tPostgresqlOutput_1.commit();
							commitCounter_tPostgresqlOutput_1 = 0;
						}

						tos_count_tPostgresqlOutput_1++;

						/**
						 * [tPostgresqlOutput_1 main ] stop
						 */

					} // End of branch "riga_cliente"

					/**
					 * [tMSSqlInput_1 end ] start
					 */

					currentComponent = "tMSSqlInput_1";

				}
				stmt_tMSSqlInput_1.close();

				conn_tMSSqlInput_1.close();

				globalMap.put("tMSSqlInput_1_NB_LINE", nb_line_tMSSqlInput_1);

				ok_Hash.put("tMSSqlInput_1", true);
				end_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();

				}

				conn_tPostgresqlOutput_1.commit();
				conn_tPostgresqlOutput_1.close();

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);
				if (execStat) {
					runStat.updateStatOnConnection("riga_cliente" + iterateId,
							2, 0);
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_1"
			globalMap.put("tHash_Lookup_row2", null);

			// free memory for "tMap_1"
			globalMap.put("tHash_Lookup_row3", null);

		}

		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		static byte[] commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int azienda_id;

		public int getAzienda_id() {
			return this.azienda_id;
		}

		public String codice_sap;

		public String getCodice_sap() {
			return this.codice_sap;
		}

		public int codice_gestionale;

		public int getCodice_gestionale() {
			return this.codice_gestionale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.azienda_id;

				result = prime
						* result
						+ ((this.codice_sap == null) ? 0 : this.codice_sap
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.azienda_id != other.azienda_id)
				return false;

			if (this.codice_sap == null) {
				if (other.codice_sap != null)
					return false;
			} else if (!this.codice_sap.equals(other.codice_sap))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.azienda_id = this.azienda_id;
			other.codice_sap = this.codice_sap;
			other.codice_gestionale = this.codice_gestionale;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.azienda_id = this.azienda_id;
			other.codice_sap = this.codice_sap;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAP_TO_GESTIONALE_import_cliente.length) {
					if (length < 1024
							&& commonByteArray_SAP_TO_GESTIONALE_import_cliente.length == 0) {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[1024];
					} else {
						commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAP_TO_GESTIONALE_import_cliente,
						0, length);
				strReturn = new String(
						commonByteArray_SAP_TO_GESTIONALE_import_cliente, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente) {

				try {

					int length = 0;

					this.azienda_id = dis.readInt();

					this.codice_sap = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.azienda_id);

				// String

				writeString(this.codice_sap, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.codice_gestionale = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.codice_gestionale);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("azienda_id=" + String.valueOf(azienda_id));
			sb.append(",codice_sap=" + codice_sap);
			sb.append(",codice_gestionale=" + String.valueOf(codice_gestionale));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.azienda_id,
					other.azienda_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codice_sap,
					other.codice_sap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row2 = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_row2.putIfAbsent("row2" + iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_row2 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row2
							.get("row2" + iterateLoop);
					runStat.updateStatOnConnection("row2" + iterateId,
							stats_row2.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_1 - inputs:(after_tMSSqlInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3)
				// outputs:(riga_cliente)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_1) {
					conn_tPostgresqlInput_1 = dataSources_tPostgresqlInput_1
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_1 = "jdbc:postgresql://"
							+ "localhost" + ":" + "5432" + "/" + "ivncr";
					String dbUser_tPostgresqlInput_1 = "ivncr";
					String dbPwd_tPostgresqlInput_1 = "ivncr";
					conn_tPostgresqlInput_1 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_1,
									dbUser_tPostgresqlInput_1,
									dbPwd_tPostgresqlInput_1);
				}
				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT    \"ivncr\".\"etl\".\"lut_divisa\".\"azienda_id\",    \"ivncr\".\"etl\".\"lut_divisa\".\"codice_sap\",    \"ivncr\".\"etl\".\"lut_divisa\".\"codice_gestionale\" FROM \"ivncr\".\"etl\".\"lut_divisa\"";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					if (colQtyInRs_tPostgresqlInput_1 < 1) {
						row2.azienda_id = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(1) != null) {
							row2.azienda_id = rs_tPostgresqlInput_1.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 2) {
						row2.codice_sap = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(2);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row2.codice_sap = tmpContent_tPostgresqlInput_1;
						} else {
							row2.codice_sap = null;
						}

					}
					if (colQtyInRs_tPostgresqlInput_1 < 3) {
						row2.codice_gestionale = 0;
					} else {

						if (rs_tPostgresqlInput_1.getObject(3) != null) {
							row2.codice_gestionale = rs_tPostgresqlInput_1
									.getInt(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row2 main ] start
					 */

					currentComponent = "tAdvancedHash_row2";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					row2Struct row2_HashRow = new row2Struct();

					row2_HashRow.azienda_id = row2.azienda_id;

					row2_HashRow.codice_sap = row2.codice_sap;

					row2_HashRow.codice_gestionale = row2.codice_gestionale;

					tHash_Lookup_row2.put(row2_HashRow);

					tos_count_tAdvancedHash_row2++;

					/**
					 * [tAdvancedHash_row2 main ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				conn_tPostgresqlInput_1.commit();
				conn_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();
				if (execStat) {
					runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		static byte[] commonByteArray_SAP_TO_GESTIONALE_import_cliente = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int azienda_id;

		public int getAzienda_id() {
			return this.azienda_id;
		}

		public short codice_sap;

		public short getCodice_sap() {
			return this.codice_sap;
		}

		public int codice_gestionale;

		public int getCodice_gestionale() {
			return this.codice_gestionale;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.azienda_id;

				result = prime * result + (int) this.codice_sap;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.azienda_id != other.azienda_id)
				return false;

			if (this.codice_sap != other.codice_sap)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.azienda_id = this.azienda_id;
			other.codice_sap = this.codice_sap;
			other.codice_gestionale = this.codice_gestionale;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.azienda_id = this.azienda_id;
			other.codice_sap = this.codice_sap;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAP_TO_GESTIONALE_import_cliente) {

				try {

					int length = 0;

					this.azienda_id = dis.readInt();

					this.codice_sap = dis.readShort();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.azienda_id);

				// short

				dos.writeShort(this.codice_sap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				this.codice_gestionale = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				dos.writeInt(this.codice_gestionale);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",azienda_id=" + String.valueOf(azienda_id));
			sb.append(",codice_sap=" + String.valueOf(codice_sap));
			sb.append(",codice_gestionale=" + String.valueOf(codice_gestionale));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.azienda_id,
					other.azienda_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codice_sap,
					other.codice_sap);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row3 = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_row3.putIfAbsent("row3" + iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_row3 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row3
							.get("row3" + iterateLoop);
					runStat.updateStatOnConnection("row3" + iterateId,
							stats_row3.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tPostgresqlInput_2 - inputs:(after_tMSSqlInput_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3)
				// outputs:(riga_cliente)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_2) {
					conn_tPostgresqlInput_2 = dataSources_tPostgresqlInput_2
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_2 = "jdbc:postgresql://"
							+ "localhost" + ":" + "5432" + "/" + "ivncr";
					String dbUser_tPostgresqlInput_2 = "ivncr";
					String dbPwd_tPostgresqlInput_2 = "ivncr";
					conn_tPostgresqlInput_2 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_2,
									dbUser_tPostgresqlInput_2,
									dbPwd_tPostgresqlInput_2);
				}
				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT    \"ivncr\".\"etl\".\"lut_gruppo_cliente\".\"id\",    \"ivncr\".\"etl\".\"lut_gruppo_cliente\".\"azienda_id\",    \"ivncr\".\"etl\".\"lut_gruppo_cliente\".\"codice_sap\",    \"ivncr\".\"etl\".\"lut_gruppo_cliente\".\"codice_gestionale\" FROM \"ivncr\".\"etl\".\"lut_gruppo_cliente\"";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
						.executeQuery(dbquery_tPostgresqlInput_2);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
						.getColumnCount();

				String tmpContent_tPostgresqlInput_2 = null;
				while (rs_tPostgresqlInput_2.next()) {
					nb_line_tPostgresqlInput_2++;

					if (colQtyInRs_tPostgresqlInput_2 < 1) {
						row3.id = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(1) != null) {
							row3.id = rs_tPostgresqlInput_2.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 2) {
						row3.azienda_id = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(2) != null) {
							row3.azienda_id = rs_tPostgresqlInput_2.getInt(2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 3) {
						row3.codice_sap = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(3) != null) {
							row3.codice_sap = rs_tPostgresqlInput_2.getShort(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tPostgresqlInput_2 < 4) {
						row3.codice_gestionale = 0;
					} else {

						if (rs_tPostgresqlInput_2.getObject(4) != null) {
							row3.codice_gestionale = rs_tPostgresqlInput_2
									.getInt(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tPostgresqlInput_2 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_2 main ] start
					 */

					currentComponent = "tPostgresqlInput_2";

					tos_count_tPostgresqlInput_2++;

					/**
					 * [tPostgresqlInput_2 main ] stop
					 */

					/**
					 * [tAdvancedHash_row3 main ] start
					 */

					currentComponent = "tAdvancedHash_row3";

					// row3
					// row3

					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
					}

					row3Struct row3_HashRow = new row3Struct();

					row3_HashRow.id = row3.id;

					row3_HashRow.azienda_id = row3.azienda_id;

					row3_HashRow.codice_sap = row3.codice_sap;

					row3_HashRow.codice_gestionale = row3.codice_gestionale;

					tHash_Lookup_row3.put(row3_HashRow);

					tos_count_tAdvancedHash_row3++;

					/**
					 * [tAdvancedHash_row3 main ] stop
					 */

					/**
					 * [tPostgresqlInput_2 end ] start
					 */

					currentComponent = "tPostgresqlInput_2";

				}
				stmt_tPostgresqlInput_2.close();

				conn_tPostgresqlInput_2.commit();
				conn_tPostgresqlInput_2.close();

				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();
				if (execStat) {
					runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw new java.lang.Error(error);

		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final import_cliente import_clienteClass = new import_cliente();

		int exitCode = import_clienteClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = import_cliente.class
					.getClassLoader().getResourceAsStream(
							"sap_to_gestionale/import_cliente_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMSSqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMSSqlInput_1) {

			e_tMSSqlInput_1.printStackTrace();
			globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : import_cliente");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 121527 characters generated by Talend Open Studio for Data Integration on the
 * 9 febbraio 2013 12.34.06 CET
 ************************************************************************************************/
